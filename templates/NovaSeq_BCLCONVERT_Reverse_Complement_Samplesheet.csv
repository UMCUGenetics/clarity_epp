SORT.BY.${INPUT.CONTAINER.ROW}${INPUT.CONTAINER.COLUMN}
OUTPUT.FILE.NAME,${OUTPUT.CONTAINER.NAME}.csv
PROCESS.POOLED.ARTIFACTS
CONTROL.SAMPLE.DEFAULT.PROJECT.NAME,Controls
HIDE, ${PROCESS.UDF.UMI - Trim}, IF, NODATA
HIDE, ${PROCESS.UDF.UMI - Read 1 Length}, IF, NODATA
HIDE, ${PROCESS.UDF.UMI - Read 2 Length}, IF, NODATA
HIDE, ${PROCESS.UDF.UMI - Read 1 Start From Cycle}, IF, NODATA
HIDE, ${PROCESS.UDF.UMI - Read 2 Start From Cycle}, IF, NODATA
<HEADER_BLOCK>
[Header]
Investigator Name,${PROCESS.TECHNICIAN}
Experiment Name,${PROCESS.UDF.Experiment Name}
Date,${DATE}
[Reads]
${PROCESS.UDF.Read 1 Cycles}
${PROCESS.UDF.Read 2 Cycles}
[Settings]
AdapterRead1,${PROCESS.UDF.Adapter}
AdapterRead2,${PROCESS.UDF.Adapter Read 2}
[Data]
</HEADER_BLOCK>
<HEADER>
Sample_ID,Sample_Name,Sample_Plate,Sample_Well,index,index2,Sample_Project,Description
</HEADER>
<DATA>
${INPUT.LIMSID},${SAMPLE.NAME##NoSpecialCharacters},${INPUT.CONTAINER.NAME},${INPUT.CONTAINER.PLACEMENT},${INPUT.REAGENT.SEQUENCE##Single},${INPUT.REAGENT.SEQUENCE##Index2RC},${SAMPLE.PROJECT.NAME##NoSpecialCharacters},
</DATA>
<TOKEN_FORMAT>
${INPUT.REAGENT.SEQUENCE##Single}
def index = token.indexOf("-")
if (index > 0) {
    return token.substring(0,index)
} else {
   return token
}

${INPUT.REAGENT.SEQUENCE##Index2RC}
def index = token.indexOf("-")
if (index > 0) {
    return token.split('-')[1].toUpperCase().reverse().collect { base ->
        switch (base) {
            case 'A': return 'T'
            case 'C': return 'G'
            case 'G': return 'C'
            case 'T': return 'A'
            default : throw new Exception("Input sequence '${sequence}' contains an invalid base '${base}'.")
        }
    }.join('')
} else {
    return ''
}

${SAMPLE.NAME##NoSpecialCharacters}
return token.replaceAll(\"[^a-zA-Z0-9-]\", \"-\")

${SAMPLE.PROJECT.NAME##NoSpecialCharacters}
return token.replaceAll(\"[^a-zA-Z0-9_]\", \"_\")

</TOKEN_FORMAT>